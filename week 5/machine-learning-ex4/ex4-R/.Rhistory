viewsData$Date <- as.Date(viewsData$Date)
viewsData <- viewsData[order(viewsData$Date),]
row.names(viewsData) <- NULL
ggplot(data=viewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
rawData <- getURL("http://stats.grok.se/json/ru/201501/Украина")
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views,  # get the data points
row.names=NULL)   # stop using the dates as names
viewsData$Date <- as.Date(viewsData$Date)
viewsData <- viewsData[order(viewsData$Date),]
row.names(viewsData) <- NULL
ggplot(data=viewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
rawData <- getURL("http://stats.grok.se/json/ru/2015/Украина")
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views,  # get the data points
row.names=NULL)   # stop using the dates as names
viewsData$Date <- as.Date(viewsData$Date)
viewsData <- viewsData[order(viewsData$Date),]
row.names(viewsData) <- NULL
ggplot(data=viewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
rawData <- getURL("http://stats.grok.se/json/ru/201500/Украина")
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views,  # get the data points
row.names=NULL)   # stop using the dates as names
viewsData$Date <- as.Date(viewsData$Date)
viewsData <- viewsData[order(viewsData$Date),]
row.names(viewsData) <- NULL
ggplot(data=viewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
rawData <- getURL("http://stats.grok.se/json/ru/201505/Украина")
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views,  # get the data points
row.names=NULL)   # stop using the dates as names
viewsData$Date <- as.Date(viewsData$Date)
viewsData <- viewsData[order(viewsData$Date),]
row.names(viewsData) <- NULL
ggplot(data=viewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2014)) {
for (month in (1:12)) {
if ((year == 2014) && (month > 10)) {
next
}
theURL <- "http://stats.grok.se/json/en/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Friday")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
rawData <- getURL(allURLs)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views,  # get the data points
row.names=NULL)   # stop using the dates as names
viewsData$Date <- as.Date(viewsData$Date)
viewsData <- viewsData[order(viewsData$Date),]
row.names(viewsData) <- NULL
ggplot(data=viewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
View(viewsData)
rawData <- getURL(allURLs)
rawData
parsedData <- fromJSON(rawData)
parsedData
parsedData <- fromJSON(rawData)
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2014)) {
for (month in (1:12)) {
if ((year == 2014) && (month > 10)) {
next
}
theURL <- "http://stats.grok.se/json/en/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Friday")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
allViewsData <- NULL # change this line
for (theURL in allURLs) {
cat("Downloading data from", theURL, "\n")
rawData <- getURL(theURL)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),
Views=parsedData$daily_views,
row.names=NULL)
allViewsData <- rbind(allViewsData, viewsData) # change this line
}
allViewsData$Date <- as.Date(allViewsData$Date)
allViewsData <- allViewsData[order(allViewsData$Date),]
row.names(allViewsData) <- NULL
ggplot(data=allViewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
theURL <- paste0(theURL, "/Украина")
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2014)) {
for (month in (1:12)) {
if ((year == 2014) && (month > 10)) {
next
}
theURL <- "http://stats.grok.se/json/ru/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Украина")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
allViewsData <- NULL # change this line
for (theURL in allURLs) {
cat("Downloading data from", theURL, "\n")
rawData <- getURL(theURL)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),
Views=parsedData$daily_views,
row.names=NULL)
allViewsData <- rbind(allViewsData, viewsData) # change this line
}
allViewsData$Date <- as.Date(allViewsData$Date)
allViewsData <- allViewsData[order(allViewsData$Date),]
row.names(allViewsData) <- NULL
ggplot(data=allViewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2015)) {
for (month in (1:12)) {
theURL <- "http://stats.grok.se/json/ru/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Украина")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
allViewsData <- NULL # change this line
for (theURL in allURLs) {
cat("Downloading data from", theURL, "\n")
rawData <- getURL(theURL)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),
Views=parsedData$daily_views,
row.names=NULL)
allViewsData <- rbind(allViewsData, viewsData) # change this line
}
allViewsData$Date <- as.Date(allViewsData$Date)
allViewsData <- allViewsData[order(allViewsData$Date),]
row.names(allViewsData) <- NULL
ggplot(data=allViewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2015)) {
for (month in (1:12)) {
theURL <- "http://stats.grok.se/json/ru/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Крым")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
allViewsData <- NULL # change this line
for (theURL in allURLs) {
cat("Downloading data from", theURL, "\n")
rawData <- getURL(theURL)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),
Views=parsedData$daily_views,
row.names=NULL)
allViewsData <- rbind(allViewsData, viewsData) # change this line
}
allViewsData$Date <- as.Date(allViewsData$Date)
allViewsData <- allViewsData[order(allViewsData$Date),]
row.names(allViewsData) <- NULL
ggplot(data=allViewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2015)) {
for (month in (1:12)) {
theURL <- "http://stats.grok.se/json/ru/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Украина")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
allViewsData <- NULL # change this line
for (theURL in allURLs) {
cat("Downloading data from", theURL, "\n")
rawData <- getURL(theURL)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),
Views=parsedData$daily_views,
row.names=NULL)
allViewsData <- rbind(allViewsData, viewsData) # change this line
}
allViewsData$Date <- as.Date(allViewsData$Date)
allViewsData <- allViewsData[order(allViewsData$Date),]
allViewsData <- subset(allViewsData, !is.na(Date))
row.names(allViewsData) <- NULL
ggplot(data=allViewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2015)) {
for (month in (1:12)) {
theURL <- "http://stats.grok.se/json/ua/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Росія")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
allViewsData <- NULL # change this line
for (theURL in allURLs) {
cat("Downloading data from", theURL, "\n")
rawData <- getURL(theURL)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),
Views=parsedData$daily_views,
row.names=NULL)
allViewsData <- rbind(allViewsData, viewsData) # change this line
}
allViewsData$Date <- as.Date(allViewsData$Date)
allViewsData <- allViewsData[order(allViewsData$Date),]
allViewsData <- subset(allViewsData, !is.na(Date))
row.names(allViewsData) <- NULL
ggplot(data=allViewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2015)) {
for (month in (1:12)) {
theURL <- "http://stats.grok.se/json/ua/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Россія")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
allViewsData <- NULL # change this line
for (theURL in allURLs) {
cat("Downloading data from", theURL, "\n")
rawData <- getURL(theURL)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),
Views=parsedData$daily_views,
row.names=NULL)
allViewsData <- rbind(allViewsData, viewsData) # change this line
}
allViewsData$Date <- as.Date(allViewsData$Date)
allViewsData <- allViewsData[order(allViewsData$Date),]
allViewsData <- subset(allViewsData, !is.na(Date))
row.names(allViewsData) <- NULL
ggplot(data=allViewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2015)) {
for (month in (1:12)) {
theURL <- "http://stats.grok.se/json/uk/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Росія")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
allViewsData <- NULL # change this line
for (theURL in allURLs) {
cat("Downloading data from", theURL, "\n")
rawData <- getURL(theURL)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),
Views=parsedData$daily_views,
row.names=NULL)
allViewsData <- rbind(allViewsData, viewsData) # change this line
}
allViewsData$Date <- as.Date(allViewsData$Date)
allViewsData <- allViewsData[order(allViewsData$Date),]
allViewsData <- subset(allViewsData, !is.na(Date))
row.names(allViewsData) <- NULL
ggplot(data=allViewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
source('~/Documents/R Projects/Future Learn/Big-Data and Human Behavier/Wikipedia_Data.R')
title: "Untitled"
---
title: "Untitled"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
## Machine Learning Online Class - Exercise 4 Neural Network Learning
# Instructions
#  ------------
#
#  This file contains code that helps you get started on the
#  linear exercise. You will need to complete the following functions
#  in this exericse:
#
#  For this exercise, you will not need to change any code in this file,
#  or any other files other than those mentioned above.
#
## Initialization
if(.Platform$OS.type == "windows") {
setwd("c:/Users/omovchaniuk/Documents/GitHub/Stanford-University/week 5/machine-learning-ex4/ex4-R")
} else {
setwd("/Users/aleksey/Documents/MOOC/Coursera/ML/Stanford-University/week 5/machine-learning-ex4/ex4-R")
}
## Setup the parameters you will use for this exercise
input_layer_size  <- 400;  # 20x20 Input Images of Digits
hidden_layer_size <- 25;   # 25 hidden units
num_labels <- 10;          # 10 labels, from 1 to 10
# (note that we have mapped "0" to label 10)
## =========== Part 1: Loading and Visualizing Data =============
#  We start the exercise by first loading and visualizing the dataset.
#  You will be working with a dataset that contains handwritten digits.
# Load Training Data
library(R.matlab)
pic <- readMat("../ex4/ex4data1.mat")
X <- pic$X
y <- pic$y
image(X)
m <- nrow(X);
sel <- sample(nrow(X));
sel[1:10]
sel <- sel[1:100];
## Machine Learning Online Class - Exercise 4 Neural Network Learning
# Instructions
#  ------------
#
#  This file contains code that helps you get started on the
#  linear exercise. You will need to complete the following functions
#  in this exericse:
#
#  For this exercise, you will not need to change any code in this file,
#  or any other files other than those mentioned above.
#
## Initialization
if(.Platform$OS.type == "windows") {
setwd("c:/Users/omovchaniuk/Documents/GitHub/Stanford-University/week 5/machine-learning-ex4/ex4-R")
} else {
setwd("/Users/aleksey/Documents/MOOC/Coursera/ML/Stanford-University/week 5/machine-learning-ex4/ex4-R")
}
## Setup the parameters you will use for this exercise
input_layer_size  <- 400;  # 20x20 Input Images of Digits
hidden_layer_size <- 25;   # 25 hidden units
num_labels <- 10;          # 10 labels, from 1 to 10
# (note that we have mapped "0" to label 10)
## =========== Part 1: Loading and Visualizing Data =============
#  We start the exercise by first loading and visualizing the dataset.
#  You will be working with a dataset that contains handwritten digits.
# Load Training Data
library(R.matlab)
pic <- readMat("../ex4/ex4data1.mat")
X <- pic$X
y <- pic$y
m <- nrow(X);
# Randomly select 100 data points to display
sel <- sample(nrow(X));
sel <- sel[1:100];
source("displayData.R")
displayData(X[sel,])
## ================ Part 2: Loading Parameters ================
# In this part of the exercise, we load some pre-initialized
# neural network parameters.
print('Loading Saved Neural Network Parameters ...')
# Load the weights into variables Theta1 and Theta2
weights <- readMat("../ex4/ex4weights.mat");
Theta1 <- weights$Theta1
Theta2 <- weights$Theta2
# Unroll parameters
nn_params = matrix(c(Theta1, Theta2));
# Weight regularization parameter (we set this to 0 here).
lambda <- 0;
source("nnCostFunction.R")
J <- nnCostFunction(nn_params, input_layer_size, hidden_layer_size, num_labels, X, y, lambda);
