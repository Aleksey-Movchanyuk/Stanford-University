ggplot(data=viewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
rawData <- getURL("http://stats.grok.se/json/ru/201505/Украина")
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views,  # get the data points
row.names=NULL)   # stop using the dates as names
viewsData$Date <- as.Date(viewsData$Date)
viewsData <- viewsData[order(viewsData$Date),]
row.names(viewsData) <- NULL
ggplot(data=viewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2014)) {
for (month in (1:12)) {
if ((year == 2014) && (month > 10)) {
next
}
theURL <- "http://stats.grok.se/json/en/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Friday")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
rawData <- getURL(allURLs)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views,  # get the data points
row.names=NULL)   # stop using the dates as names
viewsData$Date <- as.Date(viewsData$Date)
viewsData <- viewsData[order(viewsData$Date),]
row.names(viewsData) <- NULL
ggplot(data=viewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
View(viewsData)
rawData <- getURL(allURLs)
rawData
parsedData <- fromJSON(rawData)
parsedData
parsedData <- fromJSON(rawData)
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2014)) {
for (month in (1:12)) {
if ((year == 2014) && (month > 10)) {
next
}
theURL <- "http://stats.grok.se/json/en/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Friday")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
allViewsData <- NULL # change this line
for (theURL in allURLs) {
cat("Downloading data from", theURL, "\n")
rawData <- getURL(theURL)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),
Views=parsedData$daily_views,
row.names=NULL)
allViewsData <- rbind(allViewsData, viewsData) # change this line
}
allViewsData$Date <- as.Date(allViewsData$Date)
allViewsData <- allViewsData[order(allViewsData$Date),]
row.names(allViewsData) <- NULL
ggplot(data=allViewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
theURL <- paste0(theURL, "/Украина")
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2014)) {
for (month in (1:12)) {
if ((year == 2014) && (month > 10)) {
next
}
theURL <- "http://stats.grok.se/json/ru/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Украина")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
allViewsData <- NULL # change this line
for (theURL in allURLs) {
cat("Downloading data from", theURL, "\n")
rawData <- getURL(theURL)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),
Views=parsedData$daily_views,
row.names=NULL)
allViewsData <- rbind(allViewsData, viewsData) # change this line
}
allViewsData$Date <- as.Date(allViewsData$Date)
allViewsData <- allViewsData[order(allViewsData$Date),]
row.names(allViewsData) <- NULL
ggplot(data=allViewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2015)) {
for (month in (1:12)) {
theURL <- "http://stats.grok.se/json/ru/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Украина")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
allViewsData <- NULL # change this line
for (theURL in allURLs) {
cat("Downloading data from", theURL, "\n")
rawData <- getURL(theURL)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),
Views=parsedData$daily_views,
row.names=NULL)
allViewsData <- rbind(allViewsData, viewsData) # change this line
}
allViewsData$Date <- as.Date(allViewsData$Date)
allViewsData <- allViewsData[order(allViewsData$Date),]
row.names(allViewsData) <- NULL
ggplot(data=allViewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2015)) {
for (month in (1:12)) {
theURL <- "http://stats.grok.se/json/ru/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Крым")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
allViewsData <- NULL # change this line
for (theURL in allURLs) {
cat("Downloading data from", theURL, "\n")
rawData <- getURL(theURL)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),
Views=parsedData$daily_views,
row.names=NULL)
allViewsData <- rbind(allViewsData, viewsData) # change this line
}
allViewsData$Date <- as.Date(allViewsData$Date)
allViewsData <- allViewsData[order(allViewsData$Date),]
row.names(allViewsData) <- NULL
ggplot(data=allViewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2015)) {
for (month in (1:12)) {
theURL <- "http://stats.grok.se/json/ru/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Украина")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
allViewsData <- NULL # change this line
for (theURL in allURLs) {
cat("Downloading data from", theURL, "\n")
rawData <- getURL(theURL)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),
Views=parsedData$daily_views,
row.names=NULL)
allViewsData <- rbind(allViewsData, viewsData) # change this line
}
allViewsData$Date <- as.Date(allViewsData$Date)
allViewsData <- allViewsData[order(allViewsData$Date),]
allViewsData <- subset(allViewsData, !is.na(Date))
row.names(allViewsData) <- NULL
ggplot(data=allViewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2015)) {
for (month in (1:12)) {
theURL <- "http://stats.grok.se/json/ua/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Росія")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
allViewsData <- NULL # change this line
for (theURL in allURLs) {
cat("Downloading data from", theURL, "\n")
rawData <- getURL(theURL)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),
Views=parsedData$daily_views,
row.names=NULL)
allViewsData <- rbind(allViewsData, viewsData) # change this line
}
allViewsData$Date <- as.Date(allViewsData$Date)
allViewsData <- allViewsData[order(allViewsData$Date),]
allViewsData <- subset(allViewsData, !is.na(Date))
row.names(allViewsData) <- NULL
ggplot(data=allViewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2015)) {
for (month in (1:12)) {
theURL <- "http://stats.grok.se/json/ua/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Россія")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
allViewsData <- NULL # change this line
for (theURL in allURLs) {
cat("Downloading data from", theURL, "\n")
rawData <- getURL(theURL)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),
Views=parsedData$daily_views,
row.names=NULL)
allViewsData <- rbind(allViewsData, viewsData) # change this line
}
allViewsData$Date <- as.Date(allViewsData$Date)
allViewsData <- allViewsData[order(allViewsData$Date),]
allViewsData <- subset(allViewsData, !is.na(Date))
row.names(allViewsData) <- NULL
ggplot(data=allViewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
library(RJSONIO)
library(ggplot2)
allURLs <- NULL  # create a place to save the URLs # change this line
for (year in (2008:2015)) {
for (month in (1:12)) {
theURL <- "http://stats.grok.se/json/uk/"
theURL <- paste0(theURL, year)
if (month < 10) {
theURL <- paste0(theURL, "0")
}
theURL <- paste0(theURL, month)
theURL <- paste0(theURL, "/Росія")
allURLs <- c(allURLs, theURL)  # replace the print command with a
# command which adds each URL to
# allURLs
}
}
allViewsData <- NULL # change this line
for (theURL in allURLs) {
cat("Downloading data from", theURL, "\n")
rawData <- getURL(theURL)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date=names(parsedData$daily_views),
Views=parsedData$daily_views,
row.names=NULL)
allViewsData <- rbind(allViewsData, viewsData) # change this line
}
allViewsData$Date <- as.Date(allViewsData$Date)
allViewsData <- allViewsData[order(allViewsData$Date),]
allViewsData <- subset(allViewsData, !is.na(Date))
row.names(allViewsData) <- NULL
ggplot(data=allViewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
source('~/Documents/R Projects/Future Learn/Big-Data and Human Behavier/Wikipedia_Data.R')
title: "Untitled"
---
title: "Untitled"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
setwd("/Users/aleksey/Documents/MOOC/Coursera/ML/Stanford University/week 2/machine-learning-ex1/ex1 R")
source("warmUpExercise.R")
## Machine Learning Online Class
#  Exercise 1: Linear regression with multiple variables
#
#  Instructions
#  ------------
#
#  This file contains code that helps you get started on the
#  linear regression exercise.
#
## Initialization
if(.Platform$OS.type == "windows") {
setwd("c:/Users/omovchaniuk/Documents/GitHub/Stanford-University/week 2/machine-learning-ex1/ex1 R")
} else {
setwd("/Users/aleksey/Documents/MOOC/Coursera/ML/Stanford University/week 2/machine-learning-ex1/ex1 R")
}
## ================ Part 1: Feature Normalization ================
# Load Data
data <- read.table(file="../ex1/ex1data2.txt", sep=",", dec=".")
X <- data.matrix( data[,1:2] ); y <- data[,3];
m <- length(y); # number of training examples
# Scale features and set them to zero mean
source("featureNormalize.R")
X_norm <- featureNormalize(X)
# Add intercept term to X
X_norm <- cbind(matrix(1, nrow(X_norm)), X_norm)
## ================ Part 2: Gradient Descent ================
# ====================== YOUR CODE HERE ======================
# Instructions: We have provided you with the following starter
#               code that runs gradient descent with a particular
#               learning rate (alpha).
#
#               Your task is to first make sure that your functions -
#               computeCost and gradientDescent already work with
#               this starter code and support multiple variables.
#
#               After that, try running gradient descent with
#               different values of alpha and see which one gives
#               you the best result.
#
#               Finally, you should complete the code at the end
#               to predict the price of a 1650 sq-ft, 3 br house.
#
# Hint: By using the 'hold on' command, you can plot multiple
#       graphs on the same figure.
#
# Hint: At prediction, make sure you do the same feature normalization.
#
# Choose some alpha value
alpha <- 0.01;
num_iters <- 400;
# Init Theta and Run Gradient Descent
theta <- matrix(0, 3);
.Platform$OS.type
if(.Platform$OS.type == "windows") {
setwd("c:/Users/omovchaniuk/Documents/GitHub/Stanford-University/week 2/machine-learning-ex1/ex1 R")
} else {
setwd("/Users/aleksey/Documents/MOOC/Coursera/ML/Stanford University/week 2/machine-learning-ex1/ex1 R")
}
if(.Platform$OS.type == "windows") {
setwd("c:/Users/omovchaniuk/Documents/GitHub/Stanford-University/week 2/machine-learning-ex1/ex1 R")
} else {
setwd("/Users/aleksey/Documents/MOOC/Coursera/ML/Stanford-University/week 2/machine-learning-ex1/ex1 R")
}
# Choose some alpha value
alpha <- 0.01;
num_iters <- 400;
# Init Theta and Run Gradient Descent
theta <- matrix(0, 3);
source("computeCostMulti.R")
source("gradientDescentMulti.R")
# compute and display initial cost
computeCostMulti(X, y, theta)
# compute and display initial cost
computeCostMulti(X_norm, y, theta)
# run gradient descent
theta <- gradientDescent(X_norm, y, theta, alpha, iterations);
# run gradient descent
theta <- gradientDescentMulti(X_norm, y, theta, alpha, iterations);
# run gradient descent
theta <- gradientDescentMulti(X_norm, y, theta, alpha, num_iters);
gradientDescentMulti <- function(X, y, theta, alpha, num_iters) {
#GRADIENTDESCENT Performs gradient descent to learn theta
#   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by
#   taking num_iters gradient steps with learning rate alpha
# Initialize some useful values
m <- length(y); # number of training examples
J_history <- matrix(,nrow=0,ncol=1)
source("computeCostMulti.R")
for (iter in 1:num_iters) {
# ====================== YOUR CODE HERE ======================
# Instructions: Perform a single gradient step on the parameter vector
#               theta.
#
# Hint: While debugging, it can be useful to print out the values
#       of the cost function (computeCost) and gradient here.
#
hold <- theta;
for (j in 1:length( theta )) {
theta[j] <-  hold[j] - ( alpha * sum(( X %*% hold - y )*X[,j])) / m;
}
# ============================================================
# Save the cost J in every iteration
J_history <- rbind(J_history, computeCostMulti(X, y, theta));
}
return(theta)
}
# run gradient descent
theta <- gradientDescentMulti(X_norm, y, theta, alpha, num_iters);
View(theta)
# run gradient descent
theta <- gradientDescentMulti(X_norm, y, theta, alpha, iterations);
# Choose some alpha value
alpha <- 0.01;
iterations <- 400;
# Init Theta and Run Gradient Descent
theta <- matrix(0, 3);
# run gradient descent
theta <- gradientDescentMulti(X_norm, y, theta, alpha, iterations);
theta2 <- gradientDescentMulti(X, y, theta, alpha, iterations);
X <- cbind(matrix(1, nrow(X)), X)
theta2 <- gradientDescentMulti(X, y, theta, alpha, iterations);
#GRADIENTDESCENT Performs gradient descent to learn theta
#   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by
#   taking num_iters gradient steps with learning rate alpha
# Initialize some useful values
m <- length(y); # number of training examples
J_history <- matrix(,nrow=0,ncol=1)
source("computeCostMulti.R")
View(X)
View(X_norm)
hold <- theta;
for (j in 1:length( theta )) {
theta[j] <-  hold[j] - ( alpha * sum(( X %*% hold - y )*X[,j])) / m;
}
